name: Publish Caddy Packages (xcaddy -> GHCR generic)

on:
  push:
    branches: [ "main" ]
    paths:
      - .github/workflows/caddy.yml
      - "files/caddy/**"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  # ---- customize here ----
  APP_SLUG: caddy
  CADDY_VERSION: "v2.10.2"
  CADDY_MODULES: github.com/caddy-dns/cloudflare
  GO_VERSION: "1.22"
  # ------------------------

concurrency:
  group: caddy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-publish:
    name: Build & publish ${{ matrix.osarch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            osarch: linux-amd64
          - goos: linux
            goarch: arm64
            osarch: linux-arm64
          - goos: linux
            goarch: arm
            goarm: 7
            osarch: linux-armv7

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Compute metadata
        id: meta
        run: |
          SAFE_BRANCH="$(echo "${GITHUB_REF_NAME}" | tr '/' '-' )"
          SHORTSHA="${GITHUB_SHA::7}"
          MOD_SLUG="$(basename "${{ env.CADDY_MODULES }}")"   # e.g. cloudflare
          echo "branch=${SAFE_BRANCH}"    >> $GITHUB_OUTPUT
          echo "shortsha=${SHORTSHA}"     >> $GITHUB_OUTPUT
          echo "modslug=${MOD_SLUG}"      >> $GITHUB_OUTPUT

      - name: Build caddy (${{ matrix.osarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          mkdir -p dist
          BIN="caddy-${{ steps.meta.outputs.branch }}-${{ matrix.osarch }}"
          $(go env GOPATH)/bin/xcaddy build ${{ env.CADDY_VERSION }} \
            --output "dist/${BIN}" \
            --with ${{ env.CADDY_MODULES }}
          chmod +x "dist/${BIN}"
          pushd dist >/dev/null
          sha256sum "${BIN}" > "${BIN}.sha256"
          tar -czf "${BIN}.tar.gz" "${BIN}"
          popd >/dev/null

      - name: Install ORAS
        run: |
          curl -sSfL https://github.com/oras-project/oras/releases/latest/download/oras_$(uname -s | tr '[:upper:]' '[:lower:]')_amd64.tar.gz \
          | tar -xzC /usr/local/bin oras

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | oras login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Push package to GHCR (${{ matrix.osarch }})
        env:
          PKG_REPO: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}
        run: |
          FILE="dist/caddy-${{ steps.meta.outputs.branch }}-${{ matrix.osarch }}.tar.gz"
          SHA="dist/caddy-${{ steps.meta.outputs.branch }}-${{ matrix.osarch }}.sha256"

          # Repository path will look like:
          # ghcr.io/<owner>/<repo>/<app>-<module>
          REPO="${PKG_REPO}/${{ env.APP_SLUG }}-${{ steps.meta.outputs.modslug }}"

          # Tag example:
          # v2.10.2-linux-amd64-main-abc1234
          TAG="${{ env.CADDY_VERSION }}-${{ matrix.osarch }}-${{ steps.meta.outputs.branch }}-${{ steps.meta.outputs.shortsha }}"

          # Main artifact
          oras push "${REPO}:${TAG}" \
            "${FILE}:application/octet-stream" \
            --annotation "org.opencontainers.image.title=${{ env.APP_SLUG }}" \
            --annotation "org.opencontainers.image.description=Custom Caddy with ${{ env.CADDY_MODULES }} for ${{ matrix.osarch }}" \
            --annotation "org.opencontainers.image.version=${{ env.CADDY_VERSION }}" \
            --annotation "org.opencontainers.image.revision=${{ github.sha }}" \
            --annotation "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
            --annotation "caddy.module=${{ env.CADDY_MODULES }}" \
            --annotation "caddy.osarch=${{ matrix.osarch }}" \
            --annotation "caddy.branch=${{ steps.meta.outputs.branch }}"

          # Optional: publish checksum as a side artifact
          oras push "${REPO}:${TAG}-sha256" \
            "${SHA}:text/plain"

      # (Optional) Also push easy-to-consume rolling tags
      - name: Push rolling tags (latest per arch & branch)
        if: ${{ success() }}
        env:
          PKG_REPO: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}
        run: |
          FILE="dist/caddy-${{ steps.meta.outputs.branch }}-${{ matrix.osarch }}.tar.gz"
          REPO="${PKG_REPO}/${{ env.APP_SLUG }}-${{ steps.meta.outputs.modslug }}"

          # latest for this branch + arch (e.g., latest-linux-amd64-main)
          oras push "${REPO}:latest-${{ matrix.osarch }}-${{ steps.meta.outputs.branch }}" \
            "${FILE}:application/octet-stream" \
            --annotation "caddy.module=${{ env.CADDY_MODULES }}" \
            --annotation "caddy.osarch=${{ matrix.osarch }}" \
            --annotation "caddy.branch=${{ steps.meta.outputs.branch }}"
