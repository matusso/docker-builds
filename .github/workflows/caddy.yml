name: Publish Caddy Binaries to Release

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/caddy.yml'
      - 'files/caddy/**'
  workflow_dispatch:     # manual run support

permissions:
  contents: write        # needed to create/update releases
  packages: write
  security-events: write

env:
  APP_SLUG: caddy
  CADDY_VERSION: "v2.10.2"                    # Caddy version passed to xcaddy
  CADDY_MODULES: github.com/caddy-dns/cloudflare
  GO_VERSION: "1.22"

concurrency:
  group: caddy-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build ${{ matrix.osarch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            osarch: linux-amd64
          - goos: linux
            goarch: arm64
            osarch: linux-arm64
          - goos: linux
            goarch: arm
            goarm: 7
            osarch: linux-armv7

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Compute naming bits
        id: meta
        run: |
          # Use the tag name if present (on tag push). On workflow_dispatch, use ref name.
          TAG="${GITHUB_REF_NAME}"
          MOD_SLUG="$(basename "${{ env.CADDY_MODULES }}")"   # e.g. cloudflare
          echo "tag=${TAG}"       >> "$GITHUB_OUTPUT"
          echo "modslug=${MOD_SLUG}" >> "$GITHUB_OUTPUT"

      - name: Build xcaddy (${{ matrix.osarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          mkdir -p dist
          # final binary name: caddy-<osarch>-<module>-<tag or version>
          VER="${{ steps.meta.outputs.tag }}"
          [ -z "$VER" ] && VER="${{ env.CADDY_VERSION }}"
          BIN="${{ env.APP_SLUG }}-${{ matrix.osarch }}-${VER}"

          $(go env GOPATH)/bin/xcaddy build ${{ env.CADDY_VERSION }} \
            --output "dist/${BIN}" \
            --with ${{ env.CADDY_MODULES }}

          chmod +x "dist/${BIN}"
          pushd dist >/dev/null
          sha256sum "${BIN}" > "${BIN}.sha256"
          tar -czf "${BIN}.tar.gz" "${BIN}"
          popd >/dev/null

      - name: List build outputs
        run: |
          echo "Contents of dist/:"
          ls -lah dist || true
      - name: Upload artifact (${{ matrix.osarch }})
        uses: actions/upload-artifact@v4
        with:
          name: caddy-build-${{ matrix.osarch }}
          path: |
            dist/${{ env.APP_SLUG }}-${{ matrix.osarch }}-${{ steps.meta.outputs.modslug }}-*.tar.gz
            dist/${{ env.APP_SLUG }}-${{ matrix.osarch }}-${{ steps.meta.outputs.modslug }}-*.sha256
            dist/${{ env.APP_SLUG }}-${{ matrix.osarch }}-${{ steps.meta.outputs.modslug }}-*
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create/Update Release & Upload Assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true

      - name: Compute tag/release name
        id: meta
        run: |
          TAG="${GITHUB_REF_NAME}"
          [ -z "$TAG" ] && TAG="${{ env.CADDY_VERSION }}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "title=Caddy ${{ env.CADDY_VERSION }}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release (if not exists) & upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.title }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
